{"version":3,"sources":["serviceWorker.js","styles/color.js","Components/Footer.js","Components/Container.js","index.js"],"names":["Boolean","window","location","hostname","match","color","FooterContainer","styled","footer","_templateObject","Text","p","_templateObject2","TextContainer","div","_templateObject3","Link","a","_templateObject4","Footer","react_default","createElement","title","link","map","item","index","key","href","BackgroundContainer","Container_templateObject","Container_templateObject2","TextContainerLeft","Container_templateObject3","TextContainerRight","Container_templateObject4","_templateObject5","PortfolioContainer","Container_Link","Container_Text","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6EClBSC,EACL,kiBCGV,IAAMC,EAAkBC,IAAOC,OAAVC,KAKfC,EAAOH,IAAOI,EAAVC,IAGAP,GAEJQ,EAAgBN,IAAOO,IAAVC,KAMbC,EAAOT,IAAOU,EAAVC,KAKK,SAASC,IAIvB,OACCC,EAAAH,EAAAI,cAACf,EAAD,KACCc,EAAAH,EAAAI,cAACR,EAAD,KALY,CAAC,CAAES,MAAO,SAAUC,KAAM,8BACxC,CAAED,MAAO,WAAYC,KAAM,6CAC3B,CAAED,MAAO,UAAWC,KAAM,MAKhBC,IAAI,SAAUC,EAAMC,GACzB,OAAON,EAAAH,EAAAI,cAACL,EAAD,CAAMW,IAAKD,EAAOE,KAAMH,EAAKF,MAAMH,EAAAH,EAAAI,cAACX,EAAD,KAAOe,EAAKH,61BC7B5D,IAAMO,EAAsBtB,IAAOO,IAAVgB,KASnBpB,EAAOH,IAAOI,EAAVoB,IAGA1B,GAEJ2B,EAAoBzB,IAAOO,IAAVmB,KAOjBC,EAAqB3B,IAAOO,IAAVqB,KAMlBnB,EAAOT,IAAOU,EAAVmB,KAKK,SAASC,IAIvB,OACCjB,EAAAH,EAAAI,cAACQ,EAAD,KACCT,EAAAH,EAAAI,cAACW,EAAD,KACCZ,EAAAH,EAAAI,cAACiB,EAAD,CAAMV,KAAM,KAAKR,EAAAH,EAAAI,cAACkB,EAAD,0BAElBnB,EAAAH,EAAAI,cAACa,EAAD,KARY,CAAC,CAAEZ,MAAO,YAAaC,KAAM,KAC3C,CAAED,MAAO,QAASC,KAAM,KACxB,CAAED,MAAO,UAAWC,KAAM,MAQhBC,IAAI,SAAUC,EAAMC,GACzB,OAAON,EAAAH,EAAAI,cAACiB,EAAD,CAAMX,IAAKD,EAAOE,KAAMH,EAAKF,MAAMH,EAAAH,EAAAI,cAACkB,EAAD,KAAOd,EAAKH,WAIzDF,EAAAH,EAAAI,cAACF,EAAD,OCjCHqB,IAASC,OAAOrB,EAAAH,EAAAI,cAZJ,WACV,OAQDD,EAAAH,EAAAI,cAACgB,EAAD,OAGe,MAASK,SAASC,eAAe,SJ6G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f1257933.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n\t'white': '#FFFFFF',\n\t'black': '#000000'\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport color from '../styles/color';\n\nconst FooterContainer = styled.footer`\n\tposition: absolute;\n\tbottom: 0;\n\twidth: 100%;\n`\nconst Text = styled.p`\n\tmargin-block-start: 0;\n    margin-block-end: 0;\n\tcolor: ${color.white};\n`\nconst TextContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex: 1;\n\tjustify-content: flex-start;\n`\nconst Link = styled.a`\n\tpadding: 16px;\n    text-decoration: none;\n`\n\nexport default function Footer () {\n\tconst links = [{ title: 'github', link: 'https://github.com/Geccles' },\n\t{ title: 'linkedin', link: 'https://www.linkedin.com/in/galinaeccles/' },\n\t{ title: 'contact', link: '#'}]\n\treturn (\n\t\t<FooterContainer>\n\t\t\t<TextContainer>\n\t\t\t\t{\n\t\t\t\t\tlinks.map(function (item, index){\n\t\t\t\t\t\treturn <Link key={index} href={item.link}><Text>{item.title}</Text></Link>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</TextContainer>\n\t\t</FooterContainer>\n\t)\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport color from '../styles/color';\nimport Footer from './Footer';\n\nconst BackgroundContainer = styled.div`\n\tdisplay: flex;\n\tflex: 1;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100vh;\n\tbackground: rgb(19,45,79);\n\tbackground: linear-gradient(180deg, rgba(19,45,79,1) 27%, rgba(16,14,47,1) 100%);\n`\nconst Text = styled.p`\n\tmargin-block-start: 0;\n    margin-block-end: 0;\n\tcolor: ${color.white};\n`\nconst TextContainerLeft = styled.div`\n\theight: auto;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex: 1 1;\n\tjustify-content: flex-start;\n`\nconst TextContainerRight = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex: 1 1;\n\tjustify-content: flex-end;\n`\nconst Link = styled.a`\n\tpadding: 16px;\n    text-decoration: none;\n`\n\nexport default function PortfolioContainer () {\n\tconst links = [{ title: 'portfolio', link: '#' },\n\t{ title: 'about', link: '#' },\n\t{ title: 'contact', link: '#'}]\n\treturn (\n\t\t<BackgroundContainer>\n\t\t\t<TextContainerLeft>\n\t\t\t\t<Link href={'#'}><Text>Galina M. Nosti</Text></Link>\n\t\t\t</TextContainerLeft>\n\t\t\t<TextContainerRight>\n\t\t\t\t{\n\t\t\t\t\tlinks.map(function (item, index){\n\t\t\t\t\t\treturn <Link key={index} href={item.link}><Text>{item.title}</Text></Link>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</TextContainerRight>\n\t\t\t<Footer />\n\t\t</BackgroundContainer>\n\t)\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Container from './Components/Container'\n\n// const NameContext = React.createContext();\n\nconst App = () => {\n  return (\n    // <NameContext.Provider value={'Galina'}>\n    //   <div className=\"App\">\n    //     <NameContext.Consumer>\n    //       {value => <h1>Hello! My Name is {value}!</h1>}\n    //     </NameContext.Consumer>\n    //   </div>\n\t// </NameContext.Provider>\n\t<Container />\n  )\n}\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}